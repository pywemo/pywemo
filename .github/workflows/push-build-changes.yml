# This is designed to run after the "Build" workflow has failed due to modified
# files being detected. This workflow runs with elevated permissions to push a
# commit onto the PR that contains the modified files.
#
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
name: Push build changes

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - dependabot/pip/**

permissions: {}  # No permissions needed for this workflow.

jobs:
  push:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.head_repository.full_name == github.repository &&
      (github.actor == 'dependabot[bot]' || github.actor == 'esev')
    environment: pyWeMo-bot
    steps:
      # If changes were needed, the Build workflow will upload modified files
      # as an artifact. The Build workflow took place on a different workflow
      # run so the usual actions/checkout won't work. Instead this finds the
      # artifact, downloads it, and returns the path to the downloaded file.
      # The returned path will be an empty string '' if no artifacts are found.
      - name: Download build changes
        id: download
        uses: actions/github-script@v8
        with:
          result-encoding: string
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              ...context.repo,
              run_id: ${{github.event.workflow_run.id}},
            });
            const buildChangesArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith("build-changes-");
            });
            if (buildChangesArtifacts.length < 1) {
              return '';
            }
            const download = await github.rest.actions.downloadArtifact({
              ...context.repo,
              artifact_id: buildChangesArtifacts[0].id,
              archive_format: 'zip',
            });
            await io.mkdirP('${{github.workspace}}/download');
            const fs = require('fs');
            fs.writeFileSync(
              '${{github.workspace}}/download/build-changes.zip',
              Buffer.from(download.data));
            return '${{github.workspace}}/download/build-changes.zip';

      # Unzip the changes.
      - name: Unzip changes
        if: steps.download.outputs.result
        env:
          CHANGES_ZIP: ${{steps.download.outputs.result}}
        run: |
          mkdir ./changes
          cd ./changes
          unzip "$CHANGES_ZIP"

      # Get a token so changes are pushed by an app. An app is used instead
      # of using the runner permissions because the runner actions cannot
      # trigger additional workflows to run. And we want the Build workflow
      # on the PR to be triggered after pushing a commit.
      - name: Generate a token
        id: generate_token
        if: steps.download.outputs.result
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      # Push a commit with the required changes to the branch.
      # https://github.com/orgs/community/discussions/50055
      - name: Push changes
        if: steps.download.outputs.result
        uses: actions/github-script@v8
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const fs = require('fs');
            const changesPath = '${{github.workspace}}/changes/';
            const globberOptions = {
              followSymbolicLinks: false,
              matchDirectories: false,
            };
            const globber = await glob.create(`${changesPath}**`, globberOptions);

            // Add the modified files to treeObjs.
            const treeObjs = [];
            for await (const file of globber.globGenerator()) {
              const stat = fs.statSync(file);
              if (!stat.isFile()) continue;
              const content = fs.readFileSync(file, { encoding: 'utf8' });

              treeObjs.push({
                path: file.substring(changesPath.length),
                mode: stat.mode.toString(8),
                type: 'blob',
                content: content
              });
            }

            if (treeObjs.length < 1) {
              console.log('No files to upload');
              return;
            }

            // Create a new tree containing the changed blobs.
            const tree = await github.rest.git.createTree({
              ...context.repo,
              tree: treeObjs,
              base_tree: '${{github.event.workflow_run.head_commit.tree_id}}'
            });

            // Create a commit for the tree. This will be signed automatically.
            const gitCommit = await github.rest.git.createCommit({
              ...context.repo,
              message: '[dependabot skip] build changes for ${{github.event.workflow_run.head_commit.id}}',
              tree: tree.data.sha,
              parents: ['${{github.event.workflow_run.head_commit.id}}'],
            });

            // Update the branch HEAD to the new commit.
            const ref = await github.rest.git.updateRef({
              ...context.repo,
              ref: 'heads/${{github.event.workflow_run.head_branch}}',
              sha: gitCommit.data.sha,
            });
